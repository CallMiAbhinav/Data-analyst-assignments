
USE CLASSICMODELS;
SELECT * FROM CUSTOMERS;


-- DAY3 -- Q1) 
SELECT CUSTOMERNUMBER,CUSTOMERNAME,STATE,CREDITLIMIT
FROM CUSTOMERS
WHERE STATE IS NOT NULL AND CREDITLIMIT BETWEEN 50000 AND 100000
ORDER BY CREDITLIMIT DESC;


-- DAY3 -- Q2)
SELECT DISTINCT PRODUCTLINE
FROM PRODUCTLINES
WHERE PRODUCTLINE LIKE '%CARS';



-- DAY4 -- Q1)
SET SQL_SAFE_UPDATES = 0;
UPDATE ORDERS
SET COMMENTS = '-'
WHERE COMMENTS IS NULL;

SELECT ORDERNUMBER,STATUS,COMMENTS
FROM ORDERS
WHERE STATUS = 'SHIPPED';



-- DAY4 -- Q2)
SELECT EMPLOYEENUMBER,FIRSTNAME,JOBTITLE,
CASE
   WHEN JOBTITLE = 'PRESIDENT' THEN 'P'
   WHEN JOBTITLE LIKE 'Sales Manager%' THEN 'SM'
   WHEN JOBTITLE LIKE 'Sale Manager%' THEN 'SM'
   WHEN JOBTITLE = 'Sales Rep' THEN 'SP'
   WHEN JOBTITLE LIKE 'VP%' THEN 'VP'
   END AS jobTitle_abbr
FROM EMPLOYEES;



-- DAY5 -- Q1)
SELECT 
     YEAR(PAYMENTDATE) AS YEAR,
     MIN(AMOUNT) AS MIN_AMOUNT
FROM payments
GROUP BY YEAR
ORDER BY YEAR;



-- DAY5 -- Q2)
SELECT * FROM ORDERS;
SELECT 
     YEAR(ORDERDATE) AS Year, 
     CASE
        WHEN MONTH(ORDERDATE) BETWEEN 1 AND 3 THEN 'Q1'
        WHEN MONTH(ORDERDATE) BETWEEN 4 AND 6 THEN 'Q2'
        WHEN MONTH(ORDERDATE) BETWEEN 7 AND 9 THEN 'Q3'
        WHEN MONTH(ORDERDATE) BETWEEN 10 AND 12 THEN 'Q4'
        END AS Quarter,
COUNT(DISTINCT CUSTOMERNUMBER) AS 'Unique Customers',
COUNT(ORDERNUMBER) AS 'Total Orders'
FROM ORDERS
GROUP BY YEAR, QUARTER;



-- DAY5 -- Q3)
SELECT * FROM PAYMENTS;
SELECT 
LEFT(MONTHNAME(PAYMENTDATE),3) MONTH,
CONCAT(ROUND(SUM(AMOUNT/1000),0),'K') formatted_amount
FROM PAYMENTS
GROUP BY MONTH
HAVING formatted_amount BETWEEN 500 AND 1000
ORDER BY formatted_amount DESC;



-- DAY6 -- Q1)
USE CLASSICMODELS;

CREATE TABLE JOURNEY(
BUS_ID INT NOT NULL,
BUS_NAME VARCHAR(20) NOT NULL,
SOURCE_STATION VARCHAR(25) NOT NULL,
DESTINATION VARCHAR(20) NOT NULL,
EMAIL VARCHAR(30) UNIQUE
);



-- DAY6 -- Q2)
CREATE TABLE VENDOR(
VENDOR_ID INT UNIQUE NOT NULL,
NAME VARCHAR(20) NOT NULL,
EMAIL VARCHAR(25) UNIQUE,
COUNTRY VARCHAR(20) DEFAULT 'N/A'
);



-- DAY6 -- Q3)
CREATE TABLE MOVIES(
MOVIE_ID INT UNIQUE NOT NULL,
NAME varchar(25) NOT NULL,
RELEASE_YEAR VARCHAR(4) DEFAULT '-',
CAST VARCHAR(20) NOT NULL,
GENDER VARCHAR(6) CHECK(GENDER = ('MALE','FEMALE')),
NO_OF_SHOWS INT CHECK(NO_OF_SHOWS > 0)
);


-- DAY6 -- Q4)a)
CREATE TABLE PRODUCT(
PRODUCT_ID INT PRIMARY KEY AUTO_INCREMENT,
PRODUCT_NAME VARCHAR(20) NOT NULL UNIQUE,
DESCRIPTION VARCHAR(50),
SUPPLIER_ID INT,
FOREIGN KEY(SUPPLIER_ID) REFERENCES SUPPLIERS(SUPPLIER_ID)
);


-- DAY6 -- Q4)b)
CREATE TABLE SUPPLIERS(
SUPPLIER_ID INT PRIMARY KEY,
SUPPLIER_NAME VARCHAR(25),
LOCATION VARCHAR(30)
);


-- DAY6 -- Q4)c)
CREATE TABLE STOCK(
ID INT PRIMARY KEY AUTO_INCREMENT,
PRODUCT_ID INT,
BALANCE_STOCK INT,
FOREIGN KEY(PRODUCT_ID) REFERENCES PRODUCT(PRODUCT_ID)
);



-- DAY7 -- Q1)
SELECT * FROM EMPLOYEES;
SELECT * FROM CUSTOMERS;

SELECT 
E.EMPLOYEENUMBER employeeNumber,
CONCAT(E.FIRSTNAME,' ',E.LASTNAME) Sales_Person,
COUNT(DISTINCT(C.CUSTOMERNAME)) Unique_Customers
FROM EMPLOYEES E
INNER JOIN CUSTOMERS C ON E.EMPLOYEENUMBER = C.SALESREPEMPLOYEENUMBER
GROUP BY E.EMPLOYEENUMBER
ORDER BY Unique_Customers DESC;


-- DAY7 -- Q2)
SELECT * FROM CUSTOMERS;
SELECT * FROM ORDERS;
SELECT * FROM ORDERDETAILS;
SELECT * FROM PRODUCTS;

SELECT C.CUSTOMERNUMBER,C.CUSTOMERNAME,OD.PRODUCTCODE,P.PRODUCTNAME,OD.QUANTITYORDERED ORDERED_QUANTITY,(OD.QUANTITYORDERED + P.QUANTITYINSTOCK) TOTAL_INVENTORY,P.QUANTITYINSTOCK LEFT_QTY
FROM CUSTOMERS C 
INNER JOIN ORDERS O ON C.CUSTOMERNUMBER = O.CUSTOMERNUMBER
INNER JOIN ORDERDETAILS OD ON O.ORDERNUMBER = OD.ORDERNUMBER
INNER JOIN PRODUCTS P ON OD.PRODUCTCODE = P.PRODUCTCODE
ORDER BY CUSTOMERNUMBER;



-- DAY7) -- Q3)
CREATE TABLE LAPTOP(
LAPTOP_NAME VARCHAR(10)
);
INSERT INTO LAPTOP VALUES
('DELL'),
('HP');

SELECT * FROM LAPTOP;
SELECT * FROM COLOURS;

CREATE TABLE COLOURS(
COLOUR_NAME VARCHAR(10)
);

INSERT INTO COLOURS VALUES
('BLACK'),
('SILVER'),
('WHITE');

SELECT LAPTOP_NAME,colour_name FROM COLOURS
CROSS JOIN LAPTOP
ORDER BY LAPTOP_NAME; -- 6 ROWS WILL BE RETURNED SINCE THERE ARE 2 DISTINCT VALUES IN LAPTOP TABLE AND 3 DISTINCT VALUES IN COLOURS TABLE SO FOR EVERY DISTINCT VALUE IN LAPTOP TABLE THERE WILL BE 4 COMBINATIONS.


-- DAY7) -- Q4)
CREATE TABLE PROJECT(
EMPLOYEE_ID INT,
FULL_NAME VARCHAR(30),
GENDER VARCHAR(6),
MANAGER_ID INT
);

INSERT INTO PROJECT VALUES(1, 'Pranaya', 'Male', 3);
INSERT INTO PROJECT VALUES(2, 'Priyanka', 'Female', 1);
INSERT INTO PROJECT VALUES(3, 'Preety', 'Female', NULL);
INSERT INTO PROJECT VALUES(4, 'Anurag', 'Male', 1);
INSERT INTO PROJECT VALUES(5, 'Sambit', 'Male', 1);
INSERT INTO PROJECT VALUES(6, 'Rajesh', 'Male', 3);
INSERT INTO PROJECT VALUES(7, 'Hina', 'Female', 3);

SELECT * FROM PROJECT;

SELECT B.FULL_NAME MANAGER_NAME, A.FULL_NAME EMP_NAME
FROM PROJECT A, PROJECT B
WHERE A.MANAGER_ID = B.EMPLOYEE_ID;



-- DAY8) 1) Alter the table by adding the primary key and auto increment to Facility_ID column.
CREATE TABLE FACILITY(
FACILITY_ID INT,
NAME VARCHAR(30),
STATE VARCHAR(30),
COUNTRY VARCHAR(20)
);

ALTER TABLE FACILITY
DROP COLUMN FACILITY_ID,
ADD FACILITY_ID INT AUTO_INCREMENT FIRST,
ADD PRIMARY KEY(FACILITY_ID);

-- DAY8) 2) Add a new column city after name with data type as varchar which should not accept any null values.
ALTER TABLE FACILITY
ADD COLUMN CITY VARCHAR(25) AFTER NAME;


-- DAY9)
CREATE TABLE UNIVERSITY(
ID INT,
NAME VARCHAR(50)
);
 
 INSERT INTO UNIVERSITY VALUES 
 (1, "       Pune          University     "), 
(2, "  Mumbai          University     "),
(3, "     Delhi   University     "),
(4, "Madras University"),
(5, "Nagpur University");
SELECT * FROM UNIVERSITY;

SELECT ID ,REPLACE(REPLACE(REPLACE(NAME, ' ','<>'),'><',''),'<>',' ') AS Name FROM UNIVERSITY;


-- DAY10)

CREATE VIEW products_status
AS
select `year`,concat(`total`, ' ','(',round((sum(`total`) / (select count(quantityOrdered) from orderdetails)) * 100) ,')', '%') as `Value` from (select year(o.orderdate) `year`,count(od.quantityOrdered) `total` from orders o inner join orderdetails od on o.ordernumber = od.ordernumber
group by year(o.orderdate)
order by count(od.quantityOrdered) desc) s1
group by `year`;

SELECT * FROM products_status;

-- DAY11) -- Q1)
 
DELIMITER //
CREATE PROCEDURE GetCustomerLevel(IN eid INT)
BEGIN
    SELECT CUSTOMERNUMBER,CREDITLIMIT,
    CASE
        WHEN CREDITLIMIT > 100000 THEN 'Platinum'
        WHEN CREDITLIMIT BETWEEN 25000 AND 100000 THEN 'Gold'
        ELSE 'Silver'
	END AS STATUS
    FROM CUSTOMERS
    WHERE CUSTOMERNUMBER = eid;
END //
DELIMITER ;

CALL GetCustomerLevel(112);


-- DAY11) -- Q2)
SELECT * FROM CUSTOMERS;
SELECT * FROM PAYMENTS;

DELIMITER //
CREATE PROCEDURE GET_COUNTRY_PAYMENT (IN Y INT,IN C VARCHAR(25),OUT A VARCHAR(25))
BEGIN
DECLARE TOTAL_AMOUNT DECIMAL(10,2);
SELECT SUM(AMOUNT) INTO TOTAL_AMOUNT
FROM PAYMENTS
WHERE YEAR(PAYMENTDATE) = Y AND CUSTOMERNUMBER IN (SELECT
													CUSTOMERNUMBER FROM CUSTOMERS WHERE COUNTRY = C);
SET A =CONCAT(FORMAT(TOTAL_AMOUNT/1000,0),"K");
END
 // DELIMITER ;
 
 CALL GET_COUNTRY_PAYMENT(2004,"FRANCE",@A);
SELECT @A;

    
-- DAY12)-- Q1)
USE CLASSICMODELS;
SELECT * FROM ORDERS;

SELECT
    YEAR(ORDERDATE) AS YEAR_,
    MONTHNAME(ORDERDATE) AS MONTH_,
    COUNT(ORDERNUMBER) AS "ORDERCOUNT" ,
	CONCAT(ROUND(
    ( COUNT(ORDERNUMBER) -
    (LAG (COUNT(ORDERNUMBER)) OVER (PARTITION BY YEAR(ORDERDATE))))/(LAG (COUNT(ORDERNUMBER)) OVER (PARTITION BY YEAR(ORDERDATE)))*100),"%") AS "YOY"
    FROM ORDERS
    GROUP BY YEAR_,MONTH_;
    
    
-- DAY12)-- Q2)
CREATE TABLE EMP_UDF (
EMP_ID INT PRIMARY KEY AUTO_INCREMENT,
NAME_ VARCHAR(30),
DOB DATE
);

INSERT INTO EMP_UDF(NAME_,DOB)
VALUES ("Piyush", "1990-03-30"), ("Aman", "1992-08-15"), ("Meena", "1998-07-28"), ("Ketan", "2000-11-21"), ("Sanjay", "1995-05-21");
SELECT * FROM EMP_UDF;

SELECT EMP_ID,
		NAME_,
        DOB,
        CONCAT(TIMESTAMPDIFF(YEAR,DOB,NOW())," "  , "YEARS" ," ",  TIMESTAMPDIFF(MONTH,DOB,NOW())%12," ",  "MONTHS" )  AS AGE 
FROM EMP_UDF;

SELECT  TIMESTAMPDIFF(MONTH,DOB,NOW()) FROM EMP_UDF;

DELIMITER //
CREATE FUNCTION CALCULATE_AGE()
RETURNS VARCHAR(40)
DETERMINISTIC
BEGIN
    DECLARE dt date;
    SET dt = (SELECT DOB FROM EMP_UDF);
	RETURN CONCAT(TIMESTAMPDIFF(YEAR,dt,NOW())," "  , "YEARS" ," ",  TIMESTAMPDIFF(MONTH,dt,NOW())%12," ",  "MONTHS" );
END //
DELIMITER ;

SELECT CALCULATE_AGE();
SELECT SHOW_AGE('2022-06-16');

-- DAY13) -- Q1)
SELECT CUSTOMERNUMBER,CUSTOMERNAME
FROM CUSTOMERS
WHERE CUSTOMERNUMBER NOT IN (SELECT DISTINCT CUSTOMERNUMBER FROM ORDERS);

-- DAY13) -- Q2)
SELECT C.CUSTOMERNUMBER,C.CUSTOMERNAME,COUNT(O.ORDERNUMBER) AS "TOTAL ORDERS"
FROM CUSTOMERS C
LEFT JOIN ORDERS O ON O.CUSTOMERNUMBER = C.CUSTOMERNUMBER
GROUP BY CUSTOMERNUMBER
UNION
SELECT C.CUSTOMERNUMBER,C.CUSTOMERNAME,COUNT(O.ORDERNUMBER) AS "TOTAL ORDERS"
FROM CUSTOMERS c 
RIGHT JOIN ORDERS O ON O.CUSTOMERNUMBER = C.CUSTOMERNUMBER
GROUP BY CUSTOMERNUMBER;

-- DAY13) -- Q3)
SELECT ORDERNUMBER,QUANTITYORDERED
FROM (SELECT ORDERNUMBER,QUANTITYORDERED,
	DENSE_RANK () OVER (PARTITION BY ORDERNUMBER ORDER BY QUANTITYORDERED DESC) AS _DRANK
FROM ORDERDETAILS) OD
WHERE _DRANK = 2;

-- DAY13) -- Q4)
SELECT * FROM ORDERDETAILS;
SELECT MAX(OD.COUNT_) AS "MAX(TOTAL)",MIN(OD.COUNT_) "MIN(TOTAL) "
FROM( SELECT ORDERNUMBER,COUNT(PRODUCTCODE) AS COUNT_ FROM ORDERDETAILS GROUP BY ORDERNUMBER ) OD;


-- DAY13) -- Q5)
SELECT * FROM PRODUCTS;
SELECT COUNT(PRODUCTLINE),AVG(BUYPRICE) FROM PRODUCTS;

SELECT PRODUCTLINE,COUNT(BUYPRICE)
FROM PRODUCTS P 
WHERE BUYPRICE>(SELECT AVG(BUYPRICE) FROM PRODUCTS)
GROUP BY PRODUCTLINE
ORDER BY COUNT(BUYPRICE) DESC;


-- DAY14)
CREATE TABLE EMP_EH (
    EMPID INT PRIMARY KEY,
    EMPNAME VARCHAR(40),
    EMAILADDRESS VARCHAR(40));
SELECT * FROM EMP_EH;

DELIMITER //
CREATE PROCEDURE `INSERT_EMP_EH`(
	IN EMP_ID INT,
    IN EMP_NAME VARCHAR(40),
    IN EMAIL_ADDRESS VARCHAR(40))
BEGIN
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
    SELECT "THERE IS AN ERROR" AS MESSAGE;
    INSERT INTO EMP_EH (EMPID,EMPNAME, EMAILADDRESS) VALUES (EMP_ID,EMP_NAME, EMAIL_ADDRESS);
    
    SELECT "RECORD IS SUCCESSFULLY INSERTED" AS MESSAGE;
END
// DELIMITER ;

CALL `INSERT_EMP_EH`(1,"ABHINAV","ABHINAVRAJUKUMBALWAR@GMAIL.COM");
SELECT * FROM EMP_EH;

-- DAY15)
CREATE TABLE EMP_BIT(
	`NAME` VARCHAR(30),
    OCCUPATION VARCHAR(30),
    WORKING_DATE DATE,
    WORKING_HOURS INT
);

SELECT * FROM EMP_BIT;

INSERT INTO EMP_BIT (NAME, OCCUPATION ,WORKING_DATE, WORKING_HOURS)
VALUES 
('Robin', 'Scientist', '2020-10-04', 12),  
('Warner', 'Engineer', '2020-10-04', 10),  
('Peter', 'Actor', '2020-10-04', 13),  
('Marco', 'Doctor', '2020-10-04', 14),  
('Brayden', 'Teacher', '2020-10-04', 12),  
('Antonio', 'Business', '2020-10-04', 11);

DELIMITER //
CREATE TRIGGER CHECKWORKINGHOURS
BEFORE INSERT ON EMP_BIT
FOR EACH ROW
BEGIN 
	IF NEW.WORKING_HOURS < 0 THEN
		SET NEW.WORKING_HOURS= ABS(NEW.WORKING_HOURS);
	END IF;
END;
// DELIMITER ;

INSERT INTO EMP_BIT VALUES ("ATHARVA","TECHNICIAN","2019-08-14",-20);
SELECT * FROM EMP_BIT;